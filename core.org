#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/core.el

* Preamble                                                        :reference:
** Refcard
The emacs refcard can be found online [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][here]].


** Notes
- Configuration tested on a MacOS (currently, Big Sur) with locally-compiled emacs. Compiled with the following options.

#+BEGIN_SRC bash
  ACLOCAL_PATH='/usr/local/share/aclocal' ./configure --prefix=/usr/local/emacs/HEAD --with-gnutls --with-rsvg --without-dbus --enable-locallisppath=/usr/local/share/emacs/site-lisp --infodir=/usr/local/emacs/HEAD/share/info/emacs --with-ns --disable-ns-self-contained --with-imagemagick --without-xpm --without-tiff --with-jpeg --with-gif --with-png --with-xft --without-makeinfo --with-mailutils --with-json
#+END_SRC

- Homebrew has libgccjit but the native-compilation feature has not yet landed in the emacs-master.

- This is not an original piece of work - but stitched together from multiple cool examples I've found over time. Doom-emacs remains a key source of influence.

  
* Opening Setup
** Step 0 - The Warning
#+BEGIN_SRC emacs-lisp
  ;; This file is autogenerated and loaded. Do NOT change by hand.
  ;; Edit the source org-mode file (core.org) instead.
#+END_SRC


** Initial settings
We turn off some default behaviours we are not interested in (and vice versa, turn on some)
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        visible-bell t
        visual-line-mode t
        tab-width 2
        indent-tabs-mode nil
        tab-always-indent 'complete
        gc-cons-threshold 10000000
        read-process-output-max (* 1024 1024)
        lexical-binding t
        initial-scratch-message nil
        sentence-end-double-space nil
        case-fold-search nil)
        #+END_SRC

        
** Tweaking Core Settings

#+begin_src emacs-lisp
  ;; Save some typing
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; The margins
  (set-fringe-mode 10)

  ;; Delete when beginning to type when text selected.
  (delete-selection-mode t)

  ;; Highlight matching parens
  (show-paren-mode)

  ;; Mac-specific settings
  ;; (when (eq system-type 'darwin)
  ;; (setq mac-command-modifier 'meta))

  ;; The use of display-graphic-p is frivolous, but only here for the record that
  ;; emacs has all kinds of functions. So, it serves as a record; a reminder.
  (when (display-graphic-p)

    ;; Set the on-startup frame size
    (setq initial-frame-alist
          '((top . 10)
            (left . 10)
            (width . 150)
            (height . 54)))
    ;; Handle URLs anywhere with the super-mouseclick combo
    (global-set-key (kbd "s-<mouse-1>") 'browse-url)
    ;; Turn off the following modes
    (dolist (mode '(tooltip-mode tool-bar-mode scroll-bar-mode))
      (when (fboundp mode) (funcall mode -1)))
    )


  ;; Good to see you, line- and column-numbers
  (global-display-line-numbers-mode t)
  (column-number-mode t)
#+END_SRC


** Let us keep reminding ourselves
Of the new, or upcoming, shiny things. When they are available, enable the right compile/config options too.
#+BEGIN_SRC emacs-lisp
  ;; https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation
  (if (and (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      (message "Native compilation is available")
    (message "Native complation is *not* available"))


  (if (functionp 'json-serialize)
      (message "Native JSON is available")
    (message "Native JSON is *not* available"))
#+END_SRC

*** Tips:
To describe
- A variable :: C-h v
- A function :: C-h f
- A key-binding :: C-h k

  
** Load env file, setup load-path
   #+BEGIN_SRC emacs-lisp
     ;; Trick copied from doom-emacs
     (defun load-env-file (file)
       (if (null (file-exists-p file))
           (signal 'file-error (list "No env vars file exists " file ". Create one with the `env` command and store the output in " (concat *emacsd-dir* "env")))
         (when-let
             (env
              (with-temp-buffer
                (save-excursion
                  (setq-local coding-system-for-read 'utf-8)
                  (insert "\n")
                  (insert-file-contents file))
                (save-match-data
                  (when (re-search-forward "\n *\\([^#= \n]*\\)=" nil t)
                    (setq
                     env (split-string (buffer-substring (match-beginning 1) (point-max))
                                       "\n"
                                       'omit-nulls))))))
           (setq-default
            process-environment
            (append (nreverse env)
                    (default-value 'process-environment))
            exec-path
            (append (split-string (getenv "PATH") path-separator t)
                    (list exec-directory))
            shell-file-name
            (or (getenv "SHELL")
                (default-value 'shell-file-name)))
           env)))

     (add-to-list 'load-path (concat *emacsd-dir* "site-lisp"))
     (load-env-file (concat *emacsd-dir* "env"))
     (getenv "PATH")
   #+END_SRC


* Basic functions

** Utility functions
Time strings in different formats.
#+begin_src emacs-lisp
  (defun ut/now ()
    "Insert the current timestamp at the cursor position."
    (interactive)
    (insert (format-time-string "%Y-%m-%dT%T%:z")))
  (defun ut/today ()
    "Insert the current timestamp at the cursor position."
    (interactive)
    (insert (format-time-string "[%Y-%m-%d %a]")))
  (defun ut/date ()
    "Insert the current date at the cursor position."
    (interactive)
    (insert (format-time-string "%Y-%m-%d")))
#+end_src


* Packages
** Repositories and Packages Infra
Packages are downloaded from various online repositories, and the following are the most commonly used ones where packages get published.

#+BEGIN_SRC emacs-lisp
  ;; Initialize package sources
  (require 'package)

  ;; Set up our repositories
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC


** Helper Packages

Explorer
#+begin_src emacs-lisp
  (use-package git-timemachine)
  (use-package undo-tree)
  (global-undo-tree-mode +1)
#+end_src


Install the package command-log-mode to enable showing our keystrokes

#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode) ;; show keystrokes.
  ;; invoke clm/toggle-command-log-buffer to see the buffer
  ;; Invoke global-command-log-mode to enable/disable
  (use-package diminish) ;; We know you exist. We value you. Best behind the scenes though.
#+END_SRC

Makes the modeline look interesting.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline) ;; a modern modeline
  (doom-modeline-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point)
  (use-package magit)
#+END_SRC

Enable syntax-checking in various modes
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (progn
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window)))
    :config
    (progn
      (setq
       treemacs-collapse-dirs (if treemacs-python-executable 3 0)
       treemacs-width 40))
    )
  (use-package treemacs-magit)
#+END_SRC

Hydra. /Sirf naam hi kaafi hai/.
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src

Key-chords
#+begin_src emacs-lisp
  (use-package key-chord)

  (key-chord-define-global "jj" 'avy-goto-char-timer)
  (key-chord-define-global "jl" 'avy-goto-line)
  (key-chord-define-global "uu" 'undo-tree-visualize)

  (key-chord-mode +1)
#+end_src


We can get a nice dashboard with the following setup.
Github - [[https://github.com/emacs-dashboard/emacs-dashboard][https://github.com/emacs-dashboard/emacs-dashboard]]
#+begin_src emacs-lisp
   (use-package page-break-lines)
   (use-package all-the-icons)
   (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook))

   ;; Content is not centered by default. To center, set
  (setq
   dashboard-items '(
                     (recents . 5)
                     (projects . 5)
                     (registers . 5))
   dashboard-center-content t
   dashboard-set-heading-items t
   dashboard-set-file-icons t
   dashboard-set-navigator t
   dashboard-set-footer nil
   dashboard-startup-banner 'logo
   )

#+end_src


* Fonts and themes
#+begin_src emacs-lisp
(use-package color-theme-sanityinc-tomorrow)
#+end_src

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code" :height 180)
  ;; (load-theme 'modus-vivendi)
  ;; (load-theme 'wombat)
  ;; (load-theme 'tsdh-dark)
  (load-theme 'sanityinc-tomorrow-bright)
#+END_SRC


* Completion Frameworks
We'll go with ivy

#+BEGIN_SRC emacs-lisp
  (use-package smex) ;; counsel-M-x uses this to remember last command
  (use-package swiper)
  (use-package counsel)
  (use-package ivy
    :diminish
    :config
    (ivy-mode 1))

  ;; From
  ;; https://github.com/abo-abo/swiper/pull/1929#issuecomment-462828989
  ;; Keep adding to history for quicker access to recently used commands
  (defun add-m-x-history ()
    (setq last-counsel-M-x-command (caar command-history)))

  (advice-add #'counsel-M-x :after #'add-m-x-history)

  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq ivy-use-selectable-prompt t)
#+END_SRC



* LSP
[[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]] is the protocol used between an editor/IDE client and a language server that provides various language features for productive development.

#+BEGIN_SRC emacs-lisp
  ;; More ideas from
  ;; https://blog.sumtypeofway.com/posts/emacs-config.html
  (use-package which-key
    :config
    (which-key-mode))
  (use-package yasnippet
    :defer 3
    :diminish yas-minor-mode
    :config (yas-global-mode)
    :custom (yas-prompt-functions '(yas-completing-prompt))) ;; By default, lsp-mode turns on snippets
  (use-package yasnippet-snippets)
  (use-package lsp-mode
    :hook ((lsp-mode . lsp-enable-which-key-integration)
           (lsp-mode . lsp-diagnostics-modeline-mode))
    :custom
    (lsp-diagnostics-modeline-mode :project))
  (use-package lsp-ivy)
  (use-package lsp-ui
    :commands lsp-ui-mode
    :after lsp-mode)
  (use-package company)
  (use-package company-lsp)
  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol
    :after (ivy lsp-mode))
  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list)
  (use-package dap-mode)
#+END_SRC


* Clojure

** The /configuration/                                                :load:

[[file:site-lisp/init-clojure.el]]
#+BEGIN_SRC emacs-lisp
  (load "init-clojure")
#+END_SRC

We will install rainbow-delimiters and enable it for our LISPs.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'clojurescript-mode-hook 'rainbow-delimiters-mode)
#+end_src


* Java
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :ensure t)

  (add-hook 'java-mode-hook #'lsp)

  ;; Let's also syntax some groovy, kotlin and scala
  (use-package groovy-mode)
  (use-package kotlin-mode)
#+END_SRC


* Python

To use LSP, you need to have /python-language-server/  installed
#+begin_src bash
  pip install python-language-server
#+end_src


#+begin_src emacs-lisp
  (use-package python-mode)
  (use-package python-pytest)
  (use-package pyvenv)
  (pyvenv-mode t)
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-executable (executable-find "python-language-server"))
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp))))

  (defun my/python-shell-send-selection (&optional args)
    (interactive "p")
    (if (region-active-p)
        (python-shell-send-region (region-beginning) (region-end))
      (python-shell-send-statement)))


  (eval-after-load 'python-mode
    '(progn
       (define-key python-mode-map (kbd "C-c C-c") #'python-shell-send-defun)
       (define-key python-mode-map (kbd "C-c C-s") #'my/python-shell-send-selection)
       (define-key python-mode-map (kbd "C-c C-b") #'python-shell-send-buffer)))
#+end_src


* Org Mode
** Useful links
- Face attributes - [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html][link]]

** Notes
- The /htmlize/ package is required to ensure the exported HTML from org-mode files has syntax-highlighted source-code blocks.

** The configuration                                                  :load:
[[file:site-lisp/init-org.el]]
#+BEGIN_SRC emacs-lisp
  (load "init-org")
#+END_SRC


* Paredit
#+begin_src emacs-lisp
  (use-package paredit)

  (autoload 'enable-paredit-mode "paredit" "Pseudo-structural editing for Lispy text" t)

  (dolist (hook '(emacs-lisp-mode-hook
                  eval-expression-minibuffer-setup-hook
                  clojure-mode-hook
                  clojurescript-mode-hook
                  cider-repl-mode-hook))
    (add-hook hook #'enable-paredit-mode))
#+end_src


* Projects, Workspaces

** Projects                                                      :shortcuts:
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind
    (:map projectile-mode-map
          ("s-p" . projectile-command-map)))

#+end_src


** Tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode 1))

  (setq centaur-tabs-style "bar")
#+end_src


* Shortcuts                                                       :shortcuts:
** Unset Defaults
#+begin_src emacs-lisp
  ;; We don't need no suspends. Or Undo-s.
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "s-z"))
#+end_src


** General utilities

Some better replacements

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-c d") 'dash-at-point)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "C-x t") 'ut/today)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC


** Quick actions - s-2
Unicode, text-size actions...
#+begin_src emacs-lisp
  (global-set-key (kbd "s-2")
                  (defhydra s-2-actions (:color amaranth)
                    "Super-2 actions"
                    ("u" counsel-unicode-char "Unicode characters" :color red)
                    ("+" text-scale-increase "Zoom in")
                    ("=" text-scale-increase "Zoom in")
                    ("-" text-scale-decrease "Zoom out")
                    ("q" nil "quit" :color blue)))

  (global-set-key (kbd "s-n") #'make-frame)
#+end_src


** Editing
The Ctrl-w in shells is pretty useful, and we can haz it in emacs!
#+BEGIN_SRC emacs-lisp
  (defun backward-kill-word-or-kill-region (&optional arg)
    (interactive "p")
    (if (region-active-p)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))

  (global-set-key (kbd "C-w") 'backward-kill-word-or-kill-region)
#+END_SRC


** Spaces Navigation

*** M-s - Quick motion actions
Move across windows, structural navigation, window resizing
#+begin_src emacs-lisp
  (global-set-key (kbd "M-s-<left>") 'windmove-left)
  (global-set-key (kbd "M-s-<right>") 'windmove-right)
  (global-set-key (kbd "M-s-<up>") 'windmove-up)
  (global-set-key (kbd "M-s-<down>") 'windmove-down)
  (global-set-key (kbd "M-s-o") 'counsel-imenu)
  (when (fboundp 'toggle-frame-maximized)
    (global-set-key (kbd "M-s-m") 'toggle-frame-maximized))

#+end_src


*** Window actions - s-w
#+begin_src emacs-lisp
  (global-set-key (kbd "s-w")
                  (defhydra window-actions ()
                    "Window actions"
                    ("c" ace-window "switch to window")
                    ("t" treemacs "toggle treemacs")
                    ("w" treemacs-switch-workspace "switch workspace")
                    ("e" treemacs-edit-workspaces "edit workspaces")))
#+end_src


** Roam
#+begin_src emacs-lisp
  (global-set-key (kbd "s-r")
                  (defhydra org-roam-actions (:color blue)
                    "Org roam actiions"
                    ("i" org-roam-insert "insert")
                    ("c" org-roam-capture "capture")
                    ("j" org-roam-jump-to-index "jump to index")))
#+end_src


* Other Experimental Stuff
#+begin_src emacs-lisp
;;(use-package doom-themes)
#+end_src
